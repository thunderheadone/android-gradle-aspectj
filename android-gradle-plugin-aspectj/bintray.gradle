/*
 *    Copyright 2018 the original author or authors.
 *    Copyright 2018 Thunderhead
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

def bintrayUser = searchProperty('bintrayUser')
def bintrayApiKey = searchProperty('bintrayApiKey')

if (bintrayUser && bintrayApiKey) {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = bintrayUser
        key = bintrayApiKey

        configurations = ['archives'] //When uploading configuration files
        publications = ['ThunderheadAndroidGradle'] //When uploading Maven-based publication files

        dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
        publish = true //[Default: false] Whether version should be auto published after an upload
        override = false //[Default: false] Whether to override version artifacts already published
        //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
        pkg {
            repo = bintrayRepo
            name = bintrayName
            userOrg = bintrayUserOrg //An optional organization name when the repo belongs to one of the user's orgs
            desc = pluginDescription
            websiteUrl = siteUrl
            issueTrackerUrl = issuesUrl
            vcsUrl = gitUrl
            licenses = [allLicenses]
            labels = ['android', 'gradle', 'java', 'aspectj']
            publicDownloadNumbers = false

            githubRepo = githubRepository //Optional Github repository
            githubReleaseNotesFile = 'CHANGELOG.md' //Optional Github readme file

            //Optional version descriptor
            version {
                name = pluginVersion //Bintray logical version name
                //desc = //Optional - Version-specific description'
                released = new Date() //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
                vcsTag = pluginVersion
                //Optional configuration for GPG signing
                gpg {
                    sign = true //Determines whether to GPG sign the files. The default is false
                    //passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
                }
                //Optional configuration for Maven Central sync of the version
//                mavenCentralSync {
//                    sync = true //[Default: true] Determines whether to sync the version to Maven Central.
//                    user = 'userToken' //OSS user token: mandatory
//                    password = 'paasword' //OSS user password: mandatory
//                    close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//                }
            }
        }
    }
}
